# Action to send release to JIRA which will associate tickets in release notes to release version
name: jira-release

on:
  # Triggers the workflow on publish of Release in Pre-release state
  release:
    types: [ prereleased ]


env:
  JIRA_SUBDOMAIN: ryanchristilaw
  JIRA_PROJECT_KEY: PB
  RELEASE_NAME_PREFIX: Backend

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

      # Remove stray " and ' which can mess up the Regex parsing
      - name: Sanitize Input
        id: sanitize-release-notes
        run: | 
          CHANGELOG=$(cat << EOF ${{ github.event.release.body }} EOF)
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=changelog::$CHANGELOG"
        
      # Parse release body for release notes and extract JIRA ticket numbers
      # Search for regex EB-XXXX and then outputs the ticket numbers separated by commas
      - name: Parse release notes for tickets
        id: parse-release-notes
        run: |
          releaseBody=$(echo ${{ github.event.release.body }})
          echo "::set-output name=tickets::$(echo ${{ steps.sanitize-release-notes.outputs.changelog }} | grep -o '${{ env.JIRA_PROJECT_KEY }}-[1-9][0-9]*' | tr '\n' ',')"
          
      - name: Send ticket numbers to JIRA release
        run: |
          echo Sending tickets associated with release:
          echo ${{ steps.parse-release-notes.outputs.tickets }}
          
      # Creates release in JIRA (if it doesn't exist) and associates tickets with release
      - name: Release Jira Version
        uses: armona/jira-release-actions@v2.0.6
        with:
          email: ${{ secrets.JIRA_EMAIL }}
          api_token: ${{ secrets.JIRA_TOKEN }}
          subdomain: ${{ env.JIRA_SUBDOMAIN }}
          jira_project: ${{ env.JIRA_PROJECT_KEY }}
          release_name: ${{ env.RELEASE_NAME_PREFIX }} ${{ github.event.release.name }}
          create: 'true'
#           release: 'false'
          tickets: ${{ steps.parse-release-notes.outputs.tickets }}
